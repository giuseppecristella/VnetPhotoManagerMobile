//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XFlayout.AuthServiceProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/AuthenticationService")]
    public partial class CompositeType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthServiceProxy.IAuthenticationService")]
    public interface IAuthenticationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAuthenticationService/CreateUser", ReplyAction="http://tempuri.org/IAuthenticationService/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, System.AsyncCallback callback, object asyncState);
        
        string EndCreateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAuthenticationService/CustomValidateUser", ReplyAction="http://tempuri.org/IAuthenticationService/CustomValidateUserResponse")]
        System.IAsyncResult BeginCustomValidateUser(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndCustomValidateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAuthenticationService/GetClientCode", ReplyAction="http://tempuri.org/IAuthenticationService/GetClientCodeResponse")]
        System.IAsyncResult BeginGetClientCode(string code, System.AsyncCallback callback, object asyncState);
        
        int EndGetClientCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAuthenticationService/CreateUserClient", ReplyAction="http://tempuri.org/IAuthenticationService/CreateUserClientResponse")]
        System.IAsyncResult BeginCreateUserClient(
                    int clientId, 
                    string codiceStruttura, 
                    string nome, 
                    string cognome, 
                    string indirizzo, 
                    string citta, 
                    string provincia, 
                    string cap, 
                    string nazione, 
                    string telefono, 
                    string cellulare, 
                    string email, 
                    string password, 
                    System.DateTime registratoIl, 
                    bool attivo, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndCreateUserClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAuthenticationService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IAuthenticationService/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(XFlayout.AuthServiceProxy.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        XFlayout.AuthServiceProxy.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationServiceChannel : XFlayout.AuthServiceProxy.IAuthenticationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public XFlayout.AuthServiceProxy.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((XFlayout.AuthServiceProxy.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationServiceClient : System.ServiceModel.ClientBase<XFlayout.AuthServiceProxy.IAuthenticationService>, XFlayout.AuthServiceProxy.IAuthenticationService {
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomValidateUserDelegate;
        
        private EndOperationDelegate onEndCustomValidateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCustomValidateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientCodeDelegate;
        
        private EndOperationDelegate onEndGetClientCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserClientDelegate;
        
        private EndOperationDelegate onEndCreateUserClientDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AuthenticationServiceClient() : 
                base(AuthenticationServiceClient.GetDefaultBinding(), AuthenticationServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public AuthenticationServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AuthenticationServiceClient.GetBindingForEndpoint(endpointConfiguration), AuthenticationServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public AuthenticationServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuthenticationServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public AuthenticationServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuthenticationServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Impossibile impostare CookieContainer. Verificare che il binding contenga un elem" +
                            "ento HttpCookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CreateUserCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<CustomValidateUserCompletedEventArgs> CustomValidateUserCompleted;
        
        public event System.EventHandler<GetClientCodeCompletedEventArgs> GetClientCodeCompleted;
        
        public event System.EventHandler<CreateUserClientCompletedEventArgs> CreateUserClientCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult XFlayout.AuthServiceProxy.IAuthenticationService.BeginCreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(username, password, email, passwordQuestion, passwordAnswer, isApproved, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string XFlayout.AuthServiceProxy.IAuthenticationService.EndCreateUser(System.IAsyncResult result) {
            return base.Channel.EndCreateUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string email = ((string)(inValues[2]));
            string passwordQuestion = ((string)(inValues[3]));
            string passwordAnswer = ((string)(inValues[4]));
            bool isApproved = ((bool)(inValues[5]));
            return ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).BeginCreateUser(username, password, email, passwordQuestion, passwordAnswer, isApproved, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            string retVal = ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).EndCreateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved) {
            this.CreateUserAsync(username, password, email, passwordQuestion, passwordAnswer, isApproved, null);
        }
        
        public void CreateUserAsync(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        username,
                        password,
                        email,
                        passwordQuestion,
                        passwordAnswer,
                        isApproved}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult XFlayout.AuthServiceProxy.IAuthenticationService.BeginCustomValidateUser(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomValidateUser(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string XFlayout.AuthServiceProxy.IAuthenticationService.EndCustomValidateUser(System.IAsyncResult result) {
            return base.Channel.EndCustomValidateUser(result);
        }
        
        private System.IAsyncResult OnBeginCustomValidateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).BeginCustomValidateUser(username, password, callback, asyncState);
        }
        
        private object[] OnEndCustomValidateUser(System.IAsyncResult result) {
            string retVal = ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).EndCustomValidateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomValidateUserCompleted(object state) {
            if ((this.CustomValidateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomValidateUserCompleted(this, new CustomValidateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomValidateUserAsync(string username, string password) {
            this.CustomValidateUserAsync(username, password, null);
        }
        
        public void CustomValidateUserAsync(string username, string password, object userState) {
            if ((this.onBeginCustomValidateUserDelegate == null)) {
                this.onBeginCustomValidateUserDelegate = new BeginOperationDelegate(this.OnBeginCustomValidateUser);
            }
            if ((this.onEndCustomValidateUserDelegate == null)) {
                this.onEndCustomValidateUserDelegate = new EndOperationDelegate(this.OnEndCustomValidateUser);
            }
            if ((this.onCustomValidateUserCompletedDelegate == null)) {
                this.onCustomValidateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomValidateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCustomValidateUserDelegate, new object[] {
                        username,
                        password}, this.onEndCustomValidateUserDelegate, this.onCustomValidateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult XFlayout.AuthServiceProxy.IAuthenticationService.BeginGetClientCode(string code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientCode(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int XFlayout.AuthServiceProxy.IAuthenticationService.EndGetClientCode(System.IAsyncResult result) {
            return base.Channel.EndGetClientCode(result);
        }
        
        private System.IAsyncResult OnBeginGetClientCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).BeginGetClientCode(code, callback, asyncState);
        }
        
        private object[] OnEndGetClientCode(System.IAsyncResult result) {
            int retVal = ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).EndGetClientCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientCodeCompleted(object state) {
            if ((this.GetClientCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientCodeCompleted(this, new GetClientCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientCodeAsync(string code) {
            this.GetClientCodeAsync(code, null);
        }
        
        public void GetClientCodeAsync(string code, object userState) {
            if ((this.onBeginGetClientCodeDelegate == null)) {
                this.onBeginGetClientCodeDelegate = new BeginOperationDelegate(this.OnBeginGetClientCode);
            }
            if ((this.onEndGetClientCodeDelegate == null)) {
                this.onEndGetClientCodeDelegate = new EndOperationDelegate(this.OnEndGetClientCode);
            }
            if ((this.onGetClientCodeCompletedDelegate == null)) {
                this.onGetClientCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientCodeDelegate, new object[] {
                        code}, this.onEndGetClientCodeDelegate, this.onGetClientCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult XFlayout.AuthServiceProxy.IAuthenticationService.BeginCreateUserClient(
                    int clientId, 
                    string codiceStruttura, 
                    string nome, 
                    string cognome, 
                    string indirizzo, 
                    string citta, 
                    string provincia, 
                    string cap, 
                    string nazione, 
                    string telefono, 
                    string cellulare, 
                    string email, 
                    string password, 
                    System.DateTime registratoIl, 
                    bool attivo, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginCreateUserClient(clientId, codiceStruttura, nome, cognome, indirizzo, citta, provincia, cap, nazione, telefono, cellulare, email, password, registratoIl, attivo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool XFlayout.AuthServiceProxy.IAuthenticationService.EndCreateUserClient(System.IAsyncResult result) {
            return base.Channel.EndCreateUserClient(result);
        }
        
        private System.IAsyncResult OnBeginCreateUserClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int clientId = ((int)(inValues[0]));
            string codiceStruttura = ((string)(inValues[1]));
            string nome = ((string)(inValues[2]));
            string cognome = ((string)(inValues[3]));
            string indirizzo = ((string)(inValues[4]));
            string citta = ((string)(inValues[5]));
            string provincia = ((string)(inValues[6]));
            string cap = ((string)(inValues[7]));
            string nazione = ((string)(inValues[8]));
            string telefono = ((string)(inValues[9]));
            string cellulare = ((string)(inValues[10]));
            string email = ((string)(inValues[11]));
            string password = ((string)(inValues[12]));
            System.DateTime registratoIl = ((System.DateTime)(inValues[13]));
            bool attivo = ((bool)(inValues[14]));
            return ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).BeginCreateUserClient(clientId, codiceStruttura, nome, cognome, indirizzo, citta, provincia, cap, nazione, telefono, cellulare, email, password, registratoIl, attivo, callback, asyncState);
        }
        
        private object[] OnEndCreateUserClient(System.IAsyncResult result) {
            bool retVal = ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).EndCreateUserClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateUserClientCompleted(object state) {
            if ((this.CreateUserClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserClientCompleted(this, new CreateUserClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserClientAsync(int clientId, string codiceStruttura, string nome, string cognome, string indirizzo, string citta, string provincia, string cap, string nazione, string telefono, string cellulare, string email, string password, System.DateTime registratoIl, bool attivo) {
            this.CreateUserClientAsync(clientId, codiceStruttura, nome, cognome, indirizzo, citta, provincia, cap, nazione, telefono, cellulare, email, password, registratoIl, attivo, null);
        }
        
        public void CreateUserClientAsync(
                    int clientId, 
                    string codiceStruttura, 
                    string nome, 
                    string cognome, 
                    string indirizzo, 
                    string citta, 
                    string provincia, 
                    string cap, 
                    string nazione, 
                    string telefono, 
                    string cellulare, 
                    string email, 
                    string password, 
                    System.DateTime registratoIl, 
                    bool attivo, 
                    object userState) {
            if ((this.onBeginCreateUserClientDelegate == null)) {
                this.onBeginCreateUserClientDelegate = new BeginOperationDelegate(this.OnBeginCreateUserClient);
            }
            if ((this.onEndCreateUserClientDelegate == null)) {
                this.onEndCreateUserClientDelegate = new EndOperationDelegate(this.OnEndCreateUserClient);
            }
            if ((this.onCreateUserClientCompletedDelegate == null)) {
                this.onCreateUserClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserClientCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserClientDelegate, new object[] {
                        clientId,
                        codiceStruttura,
                        nome,
                        cognome,
                        indirizzo,
                        citta,
                        provincia,
                        cap,
                        nazione,
                        telefono,
                        cellulare,
                        email,
                        password,
                        registratoIl,
                        attivo}, this.onEndCreateUserClientDelegate, this.onCreateUserClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult XFlayout.AuthServiceProxy.IAuthenticationService.BeginGetDataUsingDataContract(XFlayout.AuthServiceProxy.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        XFlayout.AuthServiceProxy.CompositeType XFlayout.AuthServiceProxy.IAuthenticationService.EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            XFlayout.AuthServiceProxy.CompositeType composite = ((XFlayout.AuthServiceProxy.CompositeType)(inValues[0]));
            return ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            XFlayout.AuthServiceProxy.CompositeType retVal = ((XFlayout.AuthServiceProxy.IAuthenticationService)(this)).EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(XFlayout.AuthServiceProxy.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(XFlayout.AuthServiceProxy.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override XFlayout.AuthServiceProxy.IAuthenticationService CreateChannel() {
            return new AuthenticationServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAuthenticationService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAuthenticationService)) {
                return new System.ServiceModel.EndpointAddress("http://vnetauthenticationservice.azurewebsites.net/AuthenticationService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return AuthenticationServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAuthenticationService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return AuthenticationServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAuthenticationService);
        }
        
        private class AuthenticationServiceClientChannel : ChannelBase<XFlayout.AuthServiceProxy.IAuthenticationService>, XFlayout.AuthServiceProxy.IAuthenticationService {
            
            public AuthenticationServiceClientChannel(System.ServiceModel.ClientBase<XFlayout.AuthServiceProxy.IAuthenticationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = username;
                _args[1] = password;
                _args[2] = email;
                _args[3] = passwordQuestion;
                _args[4] = passwordAnswer;
                _args[5] = isApproved;
                System.IAsyncResult _result = base.BeginInvoke("CreateUser", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCustomValidateUser(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("CustomValidateUser", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCustomValidateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CustomValidateUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetClientCode(string code, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = code;
                System.IAsyncResult _result = base.BeginInvoke("GetClientCode", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetClientCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetClientCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateUserClient(
                        int clientId, 
                        string codiceStruttura, 
                        string nome, 
                        string cognome, 
                        string indirizzo, 
                        string citta, 
                        string provincia, 
                        string cap, 
                        string nazione, 
                        string telefono, 
                        string cellulare, 
                        string email, 
                        string password, 
                        System.DateTime registratoIl, 
                        bool attivo, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[15];
                _args[0] = clientId;
                _args[1] = codiceStruttura;
                _args[2] = nome;
                _args[3] = cognome;
                _args[4] = indirizzo;
                _args[5] = citta;
                _args[6] = provincia;
                _args[7] = cap;
                _args[8] = nazione;
                _args[9] = telefono;
                _args[10] = cellulare;
                _args[11] = email;
                _args[12] = password;
                _args[13] = registratoIl;
                _args[14] = attivo;
                System.IAsyncResult _result = base.BeginInvoke("CreateUserClient", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCreateUserClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CreateUserClient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataUsingDataContract(XFlayout.AuthServiceProxy.CompositeType composite, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = composite;
                System.IAsyncResult _result = base.BeginInvoke("GetDataUsingDataContract", _args, callback, asyncState);
                return _result;
            }
            
            public XFlayout.AuthServiceProxy.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                XFlayout.AuthServiceProxy.CompositeType _result = ((XFlayout.AuthServiceProxy.CompositeType)(base.EndInvoke("GetDataUsingDataContract", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IAuthenticationService,
        }
    }
}
